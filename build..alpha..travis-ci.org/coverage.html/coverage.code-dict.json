{"/home/travis/build/npmtest/node-npmtest-pjax/test.js":"/* istanbul instrument in package npmtest_pjax */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pjax/lib.npmtest_pjax.js":"/* istanbul instrument in package npmtest_pjax */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pjax = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pjax = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pjax/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pjax && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pjax */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pjax\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pjax.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pjax.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pjax.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pjax.__dirname + '/lib.npmtest_pjax.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/index.js":"var clone = require('./lib/clone.js')\nvar executeScripts = require('./lib/execute-scripts.js')\n\nvar forEachEls = require(\"./lib/foreach-els.js\")\n\nvar newUid = require(\"./lib/uniqueid.js\")\n\nvar on = require(\"./lib/events/on.js\")\n// var off = require(\"./lib/events/on.js\")\nvar trigger = require(\"./lib/events/trigger.js\")\n\n\nvar Pjax = function(options) {\n    this.firstrun = true\n\n    var parseOptions = require(\"./lib/proto/parse-options.js\");\n    parseOptions.apply(this,[options])\n    this.log(\"Pjax options\", this.options)\n\n    this.maxUid = this.lastUid = newUid()\n\n    this.parseDOM(document)\n\n    on(window, \"popstate\", function(st) {\n      if (st.state) {\n        var opt = clone(this.options)\n        opt.url = st.state.url\n        opt.title = st.state.title\n        opt.history = false\n\n        if (st.state.uid < this.lastUid) {\n          opt.backward = true\n        }\n        else {\n          opt.forward = true\n        }\n        this.lastUid = st.state.uid\n\n        // @todo implement history cache here, based on uid\n        this.loadUrl(st.state.url, opt)\n      }\n    }.bind(this))\n  }\n\nPjax.prototype = {\n  log: require(\"./lib/proto/log.js\"),\n\n  getElements: require(\"./lib/proto/get-elements.js\"),\n\n  parseDOM: require(\"./lib/proto/parse-dom.js\"),\n\n  refresh: require(\"./lib/proto/refresh.js\"),\n\n  reload: require(\"./lib/reload.js\"),\n\n  attachLink: require(\"./lib/proto/attach-link.js\"),\n\n  forEachSelectors: function(cb, context, DOMcontext) {\n    return require(\"./lib/foreach-selectors.js\").bind(this)(this.options.selectors, cb, context, DOMcontext)\n  },\n\n  switchSelectors: function(selectors, fromEl, toEl, options) {\n    return require(\"./lib/switches-selectors.js\").bind(this)(this.options.switches, this.options.switchesOptions, selectors, fromEl, toEl, options)\n  },\n\n  // too much problem with the code below\n  // + it’s too dangerous\n//   switchFallback: function(fromEl, toEl) {\n//     this.switchSelectors([\"head\", \"body\"], fromEl, toEl)\n//     // execute script when DOM is like it should be\n//     Pjax.executeScripts(document.querySelector(\"head\"))\n//     Pjax.executeScripts(document.querySelector(\"body\"))\n//   }\n\n  latestChance: function(href) {\n    window.location = href\n  },\n\n  onSwitch: function() {\n    trigger(window, \"resize scroll\")\n  },\n\n  loadContent: function(html, options) {\n    var tmpEl = document.implementation.createHTMLDocument()\n\n    // parse HTML attributes to copy them\n    // since we are forced to use documentElement.innerHTML (outerHTML can't be used for <html>)\n    var htmlRegex = /<html[^>]+>/gi\n    var htmlAttribsRegex = /\\s?[a-z:]+(?:\\=(?:\\'|\\\")[^\\'\\\">]+(?:\\'|\\\"))*/gi\n    var matches = html.match(htmlRegex)\n    if (matches && matches.length) {\n      matches = matches[0].match(htmlAttribsRegex)\n      if (matches.length) {\n        matches.shift()\n        matches.forEach(function(htmlAttrib) {\n          var attr = htmlAttrib.trim().split(\"=\")\n          if (attr.length === 1) {\n            tmpEl.documentElement.setAttribute(attr[0], true)\n          }\n          else {\n            tmpEl.documentElement.setAttribute(attr[0], attr[1].slice(1, -1))\n          }\n        })\n      }\n    }\n\n    tmpEl.documentElement.innerHTML = html\n    this.log(\"load content\", tmpEl.documentElement.attributes, tmpEl.documentElement.innerHTML.length)\n\n    // Clear out any focused controls before inserting new page contents.\n    // we clear focus on non form elements\n    if (document.activeElement && !document.activeElement.value) {\n      try {\n        document.activeElement.blur()\n      } catch (e) { }\n    }\n\n    // try {\n    this.switchSelectors(this.options.selectors, tmpEl, document, options)\n\n    // FF bug: Won’t autofocus fields that are inserted via JS.\n    // This behavior is incorrect. So if theres no current focus, autofocus\n    // the last field.\n    //\n    // http://www.w3.org/html/wg/drafts/html/master/forms.html\n    var autofocusEl = Array.prototype.slice.call(document.querySelectorAll(\"[autofocus]\")).pop()\n    if (autofocusEl && document.activeElement !== autofocusEl) {\n      autofocusEl.focus();\n    }\n\n    // execute scripts when DOM have been completely updated\n    this.options.selectors.forEach(function(selector) {\n      forEachEls(document.querySelectorAll(selector), function(el) {\n        executeScripts(el)\n      })\n    })\n    // }\n    // catch(e) {\n    //   if (this.options.debug) {\n    //     this.log(\"Pjax switch fail: \", e)\n    //   }\n    //   this.switchFallback(tmpEl, document)\n    // }\n  },\n\n  doRequest: require(\"./lib/request.js\"),\n\n  loadUrl: function(href, options) {\n    this.log(\"load href\", href, options)\n\n    trigger(document, \"pjax:send\", options);\n\n    // Do the request\n    this.doRequest(href, function(html) {\n      // Fail if unable to load HTML via AJAX\n      if (html === false) {\n        trigger(document,\"pjax:complete pjax:error\", options)\n\n        return\n      }\n\n      // Clear out any focused controls before inserting new page contents.\n      document.activeElement.blur()\n\n      try {\n        this.loadContent(html, options)\n      }\n      catch (e) {\n        if (!this.options.debug) {\n          if (console && console.error) {\n            console.error(\"Pjax switch fail: \", e)\n          }\n          this.latestChance(href)\n          return\n        }\n        else {\n          throw e\n        }\n      }\n\n      if (options.history) {\n        if (this.firstrun) {\n          this.lastUid = this.maxUid = newUid()\n          this.firstrun = false\n          window.history.replaceState({\n            url: window.location.href,\n            title: document.title,\n            uid: this.maxUid\n          },\n          document.title)\n        }\n\n        // Update browser history\n        this.lastUid = this.maxUid = newUid()\n        window.history.pushState({\n          url: href,\n          title: options.title,\n          uid: this.maxUid\n        },\n          options.title,\n          href)\n      }\n\n      this.forEachSelectors(function(el) {\n        this.parseDOM(el)\n      }, this)\n\n      // Fire Events\n      trigger(document,\"pjax:complete pjax:success\", options)\n\n      options.analytics()\n\n      // Scroll page to top on new page load\n      if (options.scrollTo !== false) {\n        if (options.scrollTo.length > 1) {\n          window.scrollTo(options.scrollTo[0], options.scrollTo[1])\n        }\n        else {\n          window.scrollTo(0, options.scrollTo)\n        }\n      }\n    }.bind(this))\n  }\n}\n\nPjax.isSupported = require(\"./lib/is-supported.js\");\n\n//arguably could do `if( require(\"./lib/is-supported.js\")()) {` but that might be a little to simple\nif (Pjax.isSupported()) {\n  module.exports = Pjax\n}\n// if there isn’t required browser functions, returning stupid api\nelse {\n  var stupidPjax = function() {}\n  for (var key in Pjax.prototype) {\n    if (Pjax.prototype.hasOwnProperty(key) && typeof Pjax.prototype[key] === \"function\") {\n      stupidPjax[key] = stupidPjax\n    }\n  }\n\n  module.exports = stupidPjax\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/clone.js":"module.exports = function(obj) {\n  if (null === obj || \"object\" != typeof obj) {\n    return obj\n  }\n  var copy = obj.constructor()\n  for (var attr in obj) {\n    if (obj.hasOwnProperty(attr)) {\n      copy[attr] = obj[attr]\n    }\n  }\n  return copy\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/execute-scripts.js":"var forEachEls = require(\"./foreach-els\")\nvar evalScript = require(\"./eval-script\")\n// Finds and executes scripts (used for newly added elements)\n// Needed since innerHTML does not run scripts\nmodule.exports = function(el) {\n  // console.log(\"going to execute scripts for \", el)\n  forEachEls(el.querySelectorAll(\"script\"), function(script) {\n    if (!script.type || script.type.toLowerCase() === \"text/javascript\") {\n      if (script.parentNode) {\n        script.parentNode.removeChild(script)\n      }\n      evalScript(script)\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/foreach-els.js":"/* global HTMLCollection: true */\n\nmodule.exports = function(els, fn, context) {\n  if (els instanceof HTMLCollection || els instanceof NodeList || els instanceof Array) {\n    return Array.prototype.forEach.call(els, fn, context)\n  }\n  // assume simple dom element\n  return fn.call(context, els)\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/eval-script.js":"module.exports = function(el) {\n  // console.log(\"going to execute script\", el)\n\n  var code = (el.text || el.textContent || el.innerHTML || \"\")\n  var head = document.querySelector(\"head\") || document.documentElement\n  var script = document.createElement(\"script\")\n\n  if (code.match(\"document.write\")) {\n    if (console && console.log) {\n      console.log(\"Script contains document.write. Can’t be executed correctly. Code skipped \", el)\n    }\n    return false\n  }\n\n  script.type = \"text/javascript\"\n  try {\n    script.appendChild(document.createTextNode(code))\n  }\n  catch (e) {\n    // old IEs have funky script nodes\n    script.text = code\n  }\n\n  // execute\n  head.insertBefore(script, head.firstChild)\n  head.removeChild(script) // avoid pollution\n\n  return true\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/uniqueid.js":"module.exports = (function() {\n  var counter = 0\n  return function() {\n    var id = (\"pjax\" + (new Date().getTime())) + \"_\" + counter\n    counter++\n    return id\n  }\n})()\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/events/on.js":"var forEachEls = require(\"../foreach-els\")\n\nmodule.exports = function(els, events, listener, useCapture) {\n  events = (typeof events === \"string\" ? events.split(\" \") : events)\n\n  events.forEach(function(e) {\n    forEachEls(els, function(el) {\n      el.addEventListener(e, listener, useCapture)\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/events/trigger.js":"var forEachEls = require(\"../foreach-els\")\n\nmodule.exports = function(els, events, opts) {\n  events = (typeof events === \"string\" ? events.split(\" \") : events)\n\n  events.forEach(function(e) {\n    var event // = new CustomEvent(e) // doesn't everywhere yet\n    event = document.createEvent(\"HTMLEvents\")\n    event.initEvent(e, true, true)\n    event.eventName = e\n    if (opts) {\n      Object.keys(opts).forEach(function(key) {\n        event[key] = opts[key]\n      })\n    }\n\n    forEachEls(els, function(el) {\n      var domFix = false\n      if (!el.parentNode && el !== document && el !== window) {\n        // THANKS YOU IE (9/10//11 concerned)\n        // dispatchEvent doesn't work if element is not in the dom\n        domFix = true\n        document.body.appendChild(el)\n      }\n      el.dispatchEvent(event)\n      if (domFix) {\n        el.parentNode.removeChild(el)\n      }\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/proto/log.js":"module.exports = function() {\n  if (this.options.debug && console) {\n    if (typeof console.log === \"function\") {\n      console.log.apply(console, arguments);\n    }\n    // ie is weird\n    else if (console.log) {\n      console.log(arguments);\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/proto/get-elements.js":"module.exports = function(el) {\n  return el.querySelectorAll(this.options.elements)\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/proto/parse-dom.js":"var forEachEls = require(\"../foreach-els\")\n\nvar parseElement = require(\"./parse-element\")\n\nmodule.exports = function(el) {\n  forEachEls(this.getElements(el), parseElement, this)\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/proto/parse-element.js":"module.exports = function(el) {\n  switch (el.tagName.toLowerCase()) {\n  case \"a\":\n    // only attach link if el does not already have link attached\n    if (!el.hasAttribute('data-pjax-click-state')) {\n      this.attachLink(el)\n    }\n    break\n\n  case \"form\":\n    throw \"Pjax doesnt support <form> yet.\"\n    break\n\n  default:\n    throw \"Pjax can only be applied on <a> or <form> submit\"\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/proto/refresh.js":"module.exports = function(el) {\n  this.parseDOM(el || document)\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/reload.js":"module.exports = function() {\n  window.location.reload()\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/proto/attach-link.js":"require(\"../polyfills/Function.prototype.bind\")\n\nvar on = require(\"../events/on\")\nvar clone = require(\"../clone\")\n\nvar attrClick = \"data-pjax-click-state\"\nvar attrKey = \"data-pjax-keyup-state\"\n\nvar linkAction = function(el, event) {\n  // Don’t break browser special behavior on links (like page in new window)\n  if (event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) {\n    el.setAttribute(attrClick, \"modifier\")\n    return\n  }\n\n  // we do test on href now to prevent unexpected behavior if for some reason\n  // user have href that can be dynamically updated\n\n  // Ignore external links.\n  if (el.protocol !== window.location.protocol || el.host !== window.location.host) {\n    el.setAttribute(attrClick, \"external\")\n    return\n  }\n\n  // Ignore click if we are on an anchor on the same page\n  if (el.pathname === window.location.pathname && el.hash.length > 0) {\n    el.setAttribute(attrClick, \"anchor-present\")\n    return\n  }\n\n  // Ignore anchors on the same page (keep native behavior)\n  if (el.hash && el.href.replace(el.hash, \"\") === window.location.href.replace(location.hash, \"\")) {\n    el.setAttribute(attrClick, \"anchor\")\n    return\n  }\n\n  // Ignore empty anchor \"foo.html#\"\n  if (el.href === window.location.href.split(\"#\")[0] + \"#\") {\n    el.setAttribute(attrClick, \"anchor-empty\")\n    return\n  }\n\n  event.preventDefault()\n\n  // don’t do \"nothing\" if user try to reload the page by clicking the same link twice\n  if (\n    this.options.currentUrlFullReload &&\n    el.href === window.location.href.split(\"#\")[0]\n  ) {\n    el.setAttribute(attrClick, \"reload\")\n    this.reload()\n    return\n  }\n\n  el.setAttribute(attrClick, \"load\")\n  this.loadUrl(el.href, clone(this.options))\n}\n\nvar isDefaultPrevented = function(event) {\n  return event.defaultPrevented || event.returnValue === false;\n}\n\nmodule.exports = function(el) {\n  var that = this\n\n  on(el, \"click\", function(event) {\n    if (isDefaultPrevented(event)) {\n      return\n    }\n\n    linkAction.call(that, el, event)\n  })\n\n  on(el, \"keyup\", function(event) {\n    if (isDefaultPrevented(event)) {\n      return\n    }\n\n    // Don’t break browser special behavior on links (like page in new window)\n    if (event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) {\n      el.setAttribute(attrKey, \"modifier\")\n      return\n    }\n\n    if (event.keyCode == 13) {\n      linkAction.call(that, el, event)\n    }\n  }.bind(this))\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/polyfills/Function.prototype.bind.js":"if (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== \"function\") {\n      // closest thing possible to the ECMAScript 5 internal IsCallable function\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\")\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1)\n    var that = this\n    var Fnoop = function() {}\n    var fBound = function() {\n      return that.apply(this instanceof Fnoop && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)))\n    }\n\n    Fnoop.prototype = this.prototype\n    fBound.prototype = new Fnoop()\n\n    return fBound\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/request.js":"module.exports = function(location, callback) {\n  var request = new XMLHttpRequest()\n\n  request.onreadystatechange = function() {\n    if (request.readyState === 4) {\n      if (request.status === 200) {\n        callback(request.responseText, request)\n      }\n      else {\n        callback(null, request)\n      }\n    }\n  }\n\n  // Add a timestamp as part of the query string if cache busting is enabled\n  if (this.options.cacheBust) {\n    location += (!/[?&]/.test(location) ? \"?\" : \"&\") + new Date().getTime()\n  }\n\n  request.open(\"GET\", location, true)\n  request.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n  request.send(null)\n  return request\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/is-supported.js":"module.exports = function() {\n  // Borrowed wholesale from https://github.com/defunkt/jquery-pjax\n  return window.history &&\n    window.history.pushState &&\n    window.history.replaceState &&\n    // pushState isn’t reliable on iOS until 5.\n    !navigator.userAgent.match(/((iPod|iPhone|iPad).+\\bOS\\s+[1-4]\\D|WebApps\\/.+CFNetwork)/)\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/pjax.js":"!function(e){if(\"object\"==typeof exports)module.exports=e();else if(\"function\"==typeof define&&define.amd)define(e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.Pjax=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\nvar clone = _dereq_('./lib/clone.js')\nvar executeScripts = _dereq_('./lib/execute-scripts.js')\n\nvar forEachEls = _dereq_(\"./lib/foreach-els.js\")\n\nvar newUid = _dereq_(\"./lib/uniqueid.js\")\n\nvar on = _dereq_(\"./lib/events/on.js\")\n// var off = require(\"./lib/events/on.js\")\nvar trigger = _dereq_(\"./lib/events/trigger.js\")\n\n\nvar Pjax = function(options) {\n    this.firstrun = true\n\n    var parseOptions = _dereq_(\"./lib/proto/parse-options.js\");\n    parseOptions.apply(this,[options])\n    this.log(\"Pjax options\", this.options)\n\n    this.maxUid = this.lastUid = newUid()\n\n    this.parseDOM(document)\n\n    on(window, \"popstate\", function(st) {\n      if (st.state) {\n        var opt = clone(this.options)\n        opt.url = st.state.url\n        opt.title = st.state.title\n        opt.history = false\n\n        if (st.state.uid < this.lastUid) {\n          opt.backward = true\n        }\n        else {\n          opt.forward = true\n        }\n        this.lastUid = st.state.uid\n\n        // @todo implement history cache here, based on uid\n        this.loadUrl(st.state.url, opt)\n      }\n    }.bind(this))\n  }\n\nPjax.prototype = {\n  log: _dereq_(\"./lib/proto/log.js\"),\n\n  getElements: _dereq_(\"./lib/proto/get-elements.js\"),\n\n  parseDOM: _dereq_(\"./lib/proto/parse-dom.js\"),\n\n  refresh: _dereq_(\"./lib/proto/refresh.js\"),\n\n  reload: _dereq_(\"./lib/reload.js\"),\n\n  attachLink: _dereq_(\"./lib/proto/attach-link.js\"),\n\n  forEachSelectors: function(cb, context, DOMcontext) {\n    return _dereq_(\"./lib/foreach-selectors.js\").bind(this)(this.options.selectors, cb, context, DOMcontext)\n  },\n\n  switchSelectors: function(selectors, fromEl, toEl, options) {\n    return _dereq_(\"./lib/switches-selectors.js\").bind(this)(this.options.switches, this.options.switchesOptions, selectors, fromEl, toEl, options)\n  },\n\n  // too much problem with the code below\n  // + it’s too dangerous\n//   switchFallback: function(fromEl, toEl) {\n//     this.switchSelectors([\"head\", \"body\"], fromEl, toEl)\n//     // execute script when DOM is like it should be\n//     Pjax.executeScripts(document.querySelector(\"head\"))\n//     Pjax.executeScripts(document.querySelector(\"body\"))\n//   }\n\n  latestChance: function(href) {\n    window.location = href\n  },\n\n  onSwitch: function() {\n    trigger(window, \"resize scroll\")\n  },\n\n  loadContent: function(html, options) {\n    var tmpEl = document.implementation.createHTMLDocument()\n\n    // parse HTML attributes to copy them\n    // since we are forced to use documentElement.innerHTML (outerHTML can't be used for <html>)\n    var htmlRegex = /<html[^>]+>/gi\n    var htmlAttribsRegex = /\\s?[a-z:]+(?:\\=(?:\\'|\\\")[^\\'\\\">]+(?:\\'|\\\"))*/gi\n    var matches = html.match(htmlRegex)\n    if (matches && matches.length) {\n      matches = matches[0].match(htmlAttribsRegex)\n      if (matches.length) {\n        matches.shift()\n        matches.forEach(function(htmlAttrib) {\n          var attr = htmlAttrib.trim().split(\"=\")\n          if (attr.length === 1) {\n            tmpEl.documentElement.setAttribute(attr[0], true)\n          }\n          else {\n            tmpEl.documentElement.setAttribute(attr[0], attr[1].slice(1, -1))\n          }\n        })\n      }\n    }\n\n    tmpEl.documentElement.innerHTML = html\n    this.log(\"load content\", tmpEl.documentElement.attributes, tmpEl.documentElement.innerHTML.length)\n\n    // Clear out any focused controls before inserting new page contents.\n    // we clear focus on non form elements\n    if (document.activeElement && !document.activeElement.value) {\n      try {\n        document.activeElement.blur()\n      } catch (e) { }\n    }\n\n    // try {\n    this.switchSelectors(this.options.selectors, tmpEl, document, options)\n\n    // FF bug: Won’t autofocus fields that are inserted via JS.\n    // This behavior is incorrect. So if theres no current focus, autofocus\n    // the last field.\n    //\n    // http://www.w3.org/html/wg/drafts/html/master/forms.html\n    var autofocusEl = Array.prototype.slice.call(document.querySelectorAll(\"[autofocus]\")).pop()\n    if (autofocusEl && document.activeElement !== autofocusEl) {\n      autofocusEl.focus();\n    }\n\n    // execute scripts when DOM have been completely updated\n    this.options.selectors.forEach(function(selector) {\n      forEachEls(document.querySelectorAll(selector), function(el) {\n        executeScripts(el)\n      })\n    })\n    // }\n    // catch(e) {\n    //   if (this.options.debug) {\n    //     this.log(\"Pjax switch fail: \", e)\n    //   }\n    //   this.switchFallback(tmpEl, document)\n    // }\n  },\n\n  doRequest: _dereq_(\"./lib/request.js\"),\n\n  loadUrl: function(href, options) {\n    this.log(\"load href\", href, options)\n\n    trigger(document, \"pjax:send\", options);\n\n    // Do the request\n    this.doRequest(href, function(html) {\n      // Fail if unable to load HTML via AJAX\n      if (html === false) {\n        trigger(document,\"pjax:complete pjax:error\", options)\n\n        return\n      }\n\n      // Clear out any focused controls before inserting new page contents.\n      document.activeElement.blur()\n\n      try {\n        this.loadContent(html, options)\n      }\n      catch (e) {\n        if (!this.options.debug) {\n          if (console && console.error) {\n            console.error(\"Pjax switch fail: \", e)\n          }\n          this.latestChance(href)\n          return\n        }\n        else {\n          throw e\n        }\n      }\n\n      if (options.history) {\n        if (this.firstrun) {\n          this.lastUid = this.maxUid = newUid()\n          this.firstrun = false\n          window.history.replaceState({\n            url: window.location.href,\n            title: document.title,\n            uid: this.maxUid\n          },\n          document.title)\n        }\n\n        // Update browser history\n        this.lastUid = this.maxUid = newUid()\n        window.history.pushState({\n          url: href,\n          title: options.title,\n          uid: this.maxUid\n        },\n          options.title,\n          href)\n      }\n\n      this.forEachSelectors(function(el) {\n        this.parseDOM(el)\n      }, this)\n\n      // Fire Events\n      trigger(document,\"pjax:complete pjax:success\", options)\n\n      options.analytics()\n\n      // Scroll page to top on new page load\n      if (options.scrollTo !== false) {\n        if (options.scrollTo.length > 1) {\n          window.scrollTo(options.scrollTo[0], options.scrollTo[1])\n        }\n        else {\n          window.scrollTo(0, options.scrollTo)\n        }\n      }\n    }.bind(this))\n  }\n}\n\nPjax.isSupported = _dereq_(\"./lib/is-supported.js\");\n\n//arguably could do `if( require(\"./lib/is-supported.js\")()) {` but that might be a little to simple\nif (Pjax.isSupported()) {\n  module.exports = Pjax\n}\n// if there isn’t required browser functions, returning stupid api\nelse {\n  var stupidPjax = function() {}\n  for (var key in Pjax.prototype) {\n    if (Pjax.prototype.hasOwnProperty(key) && typeof Pjax.prototype[key] === \"function\") {\n      stupidPjax[key] = stupidPjax\n    }\n  }\n\n  module.exports = stupidPjax\n}\n\n},{\"./lib/clone.js\":2,\"./lib/events/on.js\":4,\"./lib/events/trigger.js\":5,\"./lib/execute-scripts.js\":6,\"./lib/foreach-els.js\":7,\"./lib/foreach-selectors.js\":8,\"./lib/is-supported.js\":9,\"./lib/proto/attach-link.js\":11,\"./lib/proto/get-elements.js\":12,\"./lib/proto/log.js\":13,\"./lib/proto/parse-dom.js\":14,\"./lib/proto/parse-options.js\":16,\"./lib/proto/refresh.js\":17,\"./lib/reload.js\":18,\"./lib/request.js\":19,\"./lib/switches-selectors.js\":20,\"./lib/uniqueid.js\":22}],2:[function(_dereq_,module,exports){\nmodule.exports = function(obj) {\n  if (null === obj || \"object\" != typeof obj) {\n    return obj\n  }\n  var copy = obj.constructor()\n  for (var attr in obj) {\n    if (obj.hasOwnProperty(attr)) {\n      copy[attr] = obj[attr]\n    }\n  }\n  return copy\n}\n\n},{}],3:[function(_dereq_,module,exports){\nmodule.exports = function(el) {\n  // console.log(\"going to execute script\", el)\n\n  var code = (el.text || el.textContent || el.innerHTML || \"\")\n  var head = document.querySelector(\"head\") || document.documentElement\n  var script = document.createElement(\"script\")\n\n  if (code.match(\"document.write\")) {\n    if (console && console.log) {\n      console.log(\"Script contains document.write. Can’t be executed correctly. Code skipped \", el)\n    }\n    return false\n  }\n\n  script.type = \"text/javascript\"\n  try {\n    script.appendChild(document.createTextNode(code))\n  }\n  catch (e) {\n    // old IEs have funky script nodes\n    script.text = code\n  }\n\n  // execute\n  head.insertBefore(script, head.firstChild)\n  head.removeChild(script) // avoid pollution\n\n  return true\n}\n\n},{}],4:[function(_dereq_,module,exports){\nvar forEachEls = _dereq_(\"../foreach-els\")\n\nmodule.exports = function(els, events, listener, useCapture) {\n  events = (typeof events === \"string\" ? events.split(\" \") : events)\n\n  events.forEach(function(e) {\n    forEachEls(els, function(el) {\n      el.addEventListener(e, listener, useCapture)\n    })\n  })\n}\n\n},{\"../foreach-els\":7}],5:[function(_dereq_,module,exports){\nvar forEachEls = _dereq_(\"../foreach-els\")\n\nmodule.exports = function(els, events, opts) {\n  events = (typeof events === \"string\" ? events.split(\" \") : events)\n\n  events.forEach(function(e) {\n    var event // = new CustomEvent(e) // doesn't everywhere yet\n    event = document.createEvent(\"HTMLEvents\")\n    event.initEvent(e, true, true)\n    event.eventName = e\n    if (opts) {\n      Object.keys(opts).forEach(function(key) {\n        event[key] = opts[key]\n      })\n    }\n\n    forEachEls(els, function(el) {\n      var domFix = false\n      if (!el.parentNode && el !== document && el !== window) {\n        // THANKS YOU IE (9/10//11 concerned)\n        // dispatchEvent doesn't work if element is not in the dom\n        domFix = true\n        document.body.appendChild(el)\n      }\n      el.dispatchEvent(event)\n      if (domFix) {\n        el.parentNode.removeChild(el)\n      }\n    })\n  })\n}\n\n},{\"../foreach-els\":7}],6:[function(_dereq_,module,exports){\nvar forEachEls = _dereq_(\"./foreach-els\")\nvar evalScript = _dereq_(\"./eval-script\")\n// Finds and executes scripts (used for newly added elements)\n// Needed since innerHTML does not run scripts\nmodule.exports = function(el) {\n  // console.log(\"going to execute scripts for \", el)\n  forEachEls(el.querySelectorAll(\"script\"), function(script) {\n    if (!script.type || script.type.toLowerCase() === \"text/javascript\") {\n      if (script.parentNode) {\n        script.parentNode.removeChild(script)\n      }\n      evalScript(script)\n    }\n  })\n}\n\n},{\"./eval-script\":3,\"./foreach-els\":7}],7:[function(_dereq_,module,exports){\n/* global HTMLCollection: true */\n\nmodule.exports = function(els, fn, context) {\n  if (els instanceof HTMLCollection || els instanceof NodeList || els instanceof Array) {\n    return Array.prototype.forEach.call(els, fn, context)\n  }\n  // assume simple dom element\n  return fn.call(context, els)\n}\n\n},{}],8:[function(_dereq_,module,exports){\nvar forEachEls = _dereq_(\"./foreach-els\")\n\nmodule.exports = function(selectors, cb, context, DOMcontext) {\n  DOMcontext = DOMcontext || document\n  selectors.forEach(function(selector) {\n    forEachEls(DOMcontext.querySelectorAll(selector), cb, context)\n  })\n}\n\n},{\"./foreach-els\":7}],9:[function(_dereq_,module,exports){\nmodule.exports = function() {\n  // Borrowed wholesale from https://github.com/defunkt/jquery-pjax\n  return window.history &&\n    window.history.pushState &&\n    window.history.replaceState &&\n    // pushState isn’t reliable on iOS until 5.\n    !navigator.userAgent.match(/((iPod|iPhone|iPad).+\\bOS\\s+[1-4]\\D|WebApps\\/.+CFNetwork)/)\n}\n\n},{}],10:[function(_dereq_,module,exports){\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== \"function\") {\n      // closest thing possible to the ECMAScript 5 internal IsCallable function\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\")\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1)\n    var that = this\n    var Fnoop = function() {}\n    var fBound = function() {\n      return that.apply(this instanceof Fnoop && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)))\n    }\n\n    Fnoop.prototype = this.prototype\n    fBound.prototype = new Fnoop()\n\n    return fBound\n  }\n}\n\n},{}],11:[function(_dereq_,module,exports){\n_dereq_(\"../polyfills/Function.prototype.bind\")\n\nvar on = _dereq_(\"../events/on\")\nvar clone = _dereq_(\"../clone\")\n\nvar attrClick = \"data-pjax-click-state\"\nvar attrKey = \"data-pjax-keyup-state\"\n\nvar linkAction = function(el, event) {\n  // Don’t break browser special behavior on links (like page in new window)\n  if (event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) {\n    el.setAttribute(attrClick, \"modifier\")\n    return\n  }\n\n  // we do test on href now to prevent unexpected behavior if for some reason\n  // user have href that can be dynamically updated\n\n  // Ignore external links.\n  if (el.protocol !== window.location.protocol || el.host !== window.location.host) {\n    el.setAttribute(attrClick, \"external\")\n    return\n  }\n\n  // Ignore click if we are on an anchor on the same page\n  if (el.pathname === window.location.pathname && el.hash.length > 0) {\n    el.setAttribute(attrClick, \"anchor-present\")\n    return\n  }\n\n  // Ignore anchors on the same page (keep native behavior)\n  if (el.hash && el.href.replace(el.hash, \"\") === window.location.href.replace(location.hash, \"\")) {\n    el.setAttribute(attrClick, \"anchor\")\n    return\n  }\n\n  // Ignore empty anchor \"foo.html#\"\n  if (el.href === window.location.href.split(\"#\")[0] + \"#\") {\n    el.setAttribute(attrClick, \"anchor-empty\")\n    return\n  }\n\n  event.preventDefault()\n\n  // don’t do \"nothing\" if user try to reload the page by clicking the same link twice\n  if (\n    this.options.currentUrlFullReload &&\n    el.href === window.location.href.split(\"#\")[0]\n  ) {\n    el.setAttribute(attrClick, \"reload\")\n    this.reload()\n    return\n  }\n\n  el.setAttribute(attrClick, \"load\")\n  this.loadUrl(el.href, clone(this.options))\n}\n\nvar isDefaultPrevented = function(event) {\n  return event.defaultPrevented || event.returnValue === false;\n}\n\nmodule.exports = function(el) {\n  var that = this\n\n  on(el, \"click\", function(event) {\n    if (isDefaultPrevented(event)) {\n      return\n    }\n\n    linkAction.call(that, el, event)\n  })\n\n  on(el, \"keyup\", function(event) {\n    if (isDefaultPrevented(event)) {\n      return\n    }\n\n    // Don’t break browser special behavior on links (like page in new window)\n    if (event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) {\n      el.setAttribute(attrKey, \"modifier\")\n      return\n    }\n\n    if (event.keyCode == 13) {\n      linkAction.call(that, el, event)\n    }\n  }.bind(this))\n}\n\n},{\"../clone\":2,\"../events/on\":4,\"../polyfills/Function.prototype.bind\":10}],12:[function(_dereq_,module,exports){\nmodule.exports = function(el) {\n  return el.querySelectorAll(this.options.elements)\n}\n\n},{}],13:[function(_dereq_,module,exports){\nmodule.exports = function() {\n  if (this.options.debug && console) {\n    if (typeof console.log === \"function\") {\n      console.log.apply(console, arguments);\n    }\n    // ie is weird\n    else if (console.log) {\n      console.log(arguments);\n    }\n  }\n}\n\n},{}],14:[function(_dereq_,module,exports){\nvar forEachEls = _dereq_(\"../foreach-els\")\n\nvar parseElement = _dereq_(\"./parse-element\")\n\nmodule.exports = function(el) {\n  forEachEls(this.getElements(el), parseElement, this)\n}\n\n},{\"../foreach-els\":7,\"./parse-element\":15}],15:[function(_dereq_,module,exports){\nmodule.exports = function(el) {\n  switch (el.tagName.toLowerCase()) {\n  case \"a\":\n    // only attach link if el does not already have link attached\n    if (!el.hasAttribute('data-pjax-click-state')) {\n      this.attachLink(el)\n    }\n    break\n\n  case \"form\":\n    throw \"Pjax doesnt support <form> yet.\"\n    break\n\n  default:\n    throw \"Pjax can only be applied on <a> or <form> submit\"\n  }\n}\n\n},{}],16:[function(_dereq_,module,exports){\n/* global _gaq: true, ga: true */\n\nmodule.exports = function(options){\n  this.options = options\n  this.options.elements = this.options.elements || \"a[href], form[action]\"\n  this.options.selectors = this.options.selectors || [\"title\", \".js-Pjax\"]\n  this.options.switches = this.options.switches || {}\n  this.options.switchesOptions = this.options.switchesOptions || {}\n  this.options.history = this.options.history || true\n  this.options.analytics = this.options.analytics || function() {\n    // options.backward or options.foward can be true or undefined\n    // by default, we do track back/foward hit\n    // https://productforums.google.com/forum/#!topic/analytics/WVwMDjLhXYk\n    if (window._gaq) {\n      _gaq.push([\"_trackPageview\"])\n    }\n    if (window.ga) {\n      ga(\"send\", \"pageview\", {page: location.pathname, title: document.title})\n    }\n  }\n  this.options.scrollTo = (typeof this.options.scrollTo === 'undefined') ? 0 : this.options.scrollTo;\n  this.options.cacheBust = (typeof this.options.cacheBust === 'undefined') ? true : this.options.cacheBust\n  this.options.debug = this.options.debug || false\n\n  // we can’t replace body.outerHTML or head.outerHTML\n  // it create a bug where new body or new head are created in the dom\n  // if you set head.outerHTML, a new body tag is appended, so the dom get 2 body\n  // & it break the switchFallback which replace head & body\n  if (!this.options.switches.head) {\n    this.options.switches.head = this.switchElementsAlt\n  }\n  if (!this.options.switches.body) {\n    this.options.switches.body = this.switchElementsAlt\n  }\n  if (typeof options.analytics !== \"function\") {\n    options.analytics = function() {}\n  }\n}\n},{}],17:[function(_dereq_,module,exports){\nmodule.exports = function(el) {\n  this.parseDOM(el || document)\n}\n\n},{}],18:[function(_dereq_,module,exports){\nmodule.exports = function() {\n  window.location.reload()\n}\n\n},{}],19:[function(_dereq_,module,exports){\nmodule.exports = function(location, callback) {\n  var request = new XMLHttpRequest()\n\n  request.onreadystatechange = function() {\n    if (request.readyState === 4) {\n      if (request.status === 200) {\n        callback(request.responseText, request)\n      }\n      else {\n        callback(null, request)\n      }\n    }\n  }\n\n  // Add a timestamp as part of the query string if cache busting is enabled\n  if (this.options.cacheBust) {\n    location += (!/[?&]/.test(location) ? \"?\" : \"&\") + new Date().getTime()\n  }\n\n  request.open(\"GET\", location, true)\n  request.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n  request.send(null)\n  return request\n}\n\n},{}],20:[function(_dereq_,module,exports){\nvar forEachEls = _dereq_(\"./foreach-els\")\n\nvar defaultSwitches = _dereq_(\"./switches\")\n\nmodule.exports = function(switches, switchesOptions, selectors, fromEl, toEl, options) {\n  selectors.forEach(function(selector) {\n    var newEls = fromEl.querySelectorAll(selector)\n    var oldEls = toEl.querySelectorAll(selector)\n    if (this.log) {\n      this.log(\"Pjax switch\", selector, newEls, oldEls)\n    }\n    if (newEls.length !== oldEls.length) {\n      // forEachEls(newEls, function(el) {\n      //   this.log(\"newEl\", el, el.outerHTML)\n      // }, this)\n      // forEachEls(oldEls, function(el) {\n      //   this.log(\"oldEl\", el, el.outerHTML)\n      // }, this)\n      throw \"DOM doesn’t look the same on new loaded page: ’\" + selector + \"’ - new \" + newEls.length + \", old \" + oldEls.length\n    }\n\n    forEachEls(newEls, function(newEl, i) {\n      var oldEl = oldEls[i]\n      if (this.log) {\n        this.log(\"newEl\", newEl, \"oldEl\", oldEl)\n      }\n      if (switches[selector]) {\n        switches[selector].bind(this)(oldEl, newEl, options, switchesOptions[selector])\n      }\n      else {\n        defaultSwitches.outerHTML.bind(this)(oldEl, newEl, options)\n      }\n    }, this)\n  }, this)\n}\n\n},{\"./foreach-els\":7,\"./switches\":21}],21:[function(_dereq_,module,exports){\nvar on = _dereq_(\"./events/on.js\")\n// var off = require(\"./lib/events/on.js\")\n// var trigger = require(\"./lib/events/trigger.js\")\n\n\nmodule.exports = {\n  outerHTML: function(oldEl, newEl) {\n    oldEl.outerHTML = newEl.outerHTML\n    this.onSwitch()\n  },\n\n  innerHTML: function(oldEl, newEl) {\n    oldEl.innerHTML = newEl.innerHTML\n    oldEl.className = newEl.className\n    this.onSwitch()\n  },\n\n  sideBySide: function(oldEl, newEl, options, switchOptions) {\n    var forEach = Array.prototype.forEach\n    var elsToRemove = []\n    var elsToAdd = []\n    var fragToAppend = document.createDocumentFragment()\n    // height transition are shitty on safari\n    // so commented for now (until I found something ?)\n    // var relevantHeight = 0\n    var animationEventNames = \"animationend webkitAnimationEnd MSAnimationEnd oanimationend\"\n    var animatedElsNumber = 0\n    var sexyAnimationEnd = function(e) {\n          if (e.target != e.currentTarget) {\n            // end triggered by an animation on a child\n            return\n          }\n\n          animatedElsNumber--\n          if (animatedElsNumber <= 0 && elsToRemove) {\n            elsToRemove.forEach(function(el) {\n              // browsing quickly can make the el\n              // already removed by last page update ?\n              if (el.parentNode) {\n                el.parentNode.removeChild(el)\n              }\n            })\n\n            elsToAdd.forEach(function(el) {\n              el.className = el.className.replace(el.getAttribute(\"data-pjax-classes\"), \"\")\n              el.removeAttribute(\"data-pjax-classes\")\n              // Pjax.off(el, animationEventNames, sexyAnimationEnd, true)\n            })\n\n            elsToAdd = null // free memory\n            elsToRemove = null // free memory\n\n            // assume the height is now useless (avoid bug since there is overflow hidden on the parent)\n            // oldEl.style.height = \"auto\"\n\n            // this is to trigger some repaint (example: picturefill)\n            this.onSwitch()\n            // Pjax.trigger(window, \"scroll\")\n          }\n        }.bind(this)\n\n    // Force height to be able to trigger css animation\n    // here we get the relevant height\n    // oldEl.parentNode.appendChild(newEl)\n    // relevantHeight = newEl.getBoundingClientRect().height\n    // oldEl.parentNode.removeChild(newEl)\n    // oldEl.style.height = oldEl.getBoundingClientRect().height + \"px\"\n\n    switchOptions = switchOptions || {}\n\n    forEach.call(oldEl.childNodes, function(el) {\n      elsToRemove.push(el)\n      if (el.classList && !el.classList.contains(\"js-Pjax-remove\")) {\n        // for fast switch, clean element that just have been added, & not cleaned yet.\n        if (el.hasAttribute(\"data-pjax-classes\")) {\n          el.className = el.className.replace(el.getAttribute(\"data-pjax-classes\"), \"\")\n          el.removeAttribute(\"data-pjax-classes\")\n        }\n        el.classList.add(\"js-Pjax-remove\")\n        if (switchOptions.callbacks && switchOptions.callbacks.removeElement) {\n          switchOptions.callbacks.removeElement(el)\n        }\n        if (switchOptions.classNames) {\n          el.className += \" \" + switchOptions.classNames.remove + \" \" + (options.backward ? switchOptions.classNames.backward : switchOptions.classNames.forward)\n        }\n        animatedElsNumber++\n        on(el, animationEventNames, sexyAnimationEnd, true)\n      }\n    })\n\n    forEach.call(newEl.childNodes, function(el) {\n      if (el.classList) {\n        var addClasses = \"\"\n        if (switchOptions.classNames) {\n          addClasses = \" js-Pjax-add \" + switchOptions.classNames.add + \" \" + (options.backward ? switchOptions.classNames.forward : switchOptions.classNames.backward)\n        }\n        if (switchOptions.callbacks && switchOptions.callbacks.addElement) {\n          switchOptions.callbacks.addElement(el)\n        }\n        el.className += addClasses\n        el.setAttribute(\"data-pjax-classes\", addClasses)\n        elsToAdd.push(el)\n        fragToAppend.appendChild(el)\n        animatedElsNumber++\n        on(el, animationEventNames, sexyAnimationEnd, true)\n      }\n    })\n\n    // pass all className of the parent\n    oldEl.className = newEl.className\n    oldEl.appendChild(fragToAppend)\n\n    // oldEl.style.height = relevantHeight + \"px\"\n  }\n}\n\n},{\"./events/on.js\":4}],22:[function(_dereq_,module,exports){\nmodule.exports = (function() {\n  var counter = 0\n  return function() {\n    var id = (\"pjax\" + (new Date().getTime())) + \"_\" + counter\n    counter++\n    return id\n  }\n})()\n\n},{}]},{},[1])\n(1)\n});","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/foreach-selectors.js":"var forEachEls = require(\"./foreach-els\")\n\nmodule.exports = function(selectors, cb, context, DOMcontext) {\n  DOMcontext = DOMcontext || document\n  selectors.forEach(function(selector) {\n    forEachEls(DOMcontext.querySelectorAll(selector), cb, context)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/switches.js":"var on = require(\"./events/on.js\")\n// var off = require(\"./lib/events/on.js\")\n// var trigger = require(\"./lib/events/trigger.js\")\n\n\nmodule.exports = {\n  outerHTML: function(oldEl, newEl) {\n    oldEl.outerHTML = newEl.outerHTML\n    this.onSwitch()\n  },\n\n  innerHTML: function(oldEl, newEl) {\n    oldEl.innerHTML = newEl.innerHTML\n    oldEl.className = newEl.className\n    this.onSwitch()\n  },\n\n  sideBySide: function(oldEl, newEl, options, switchOptions) {\n    var forEach = Array.prototype.forEach\n    var elsToRemove = []\n    var elsToAdd = []\n    var fragToAppend = document.createDocumentFragment()\n    // height transition are shitty on safari\n    // so commented for now (until I found something ?)\n    // var relevantHeight = 0\n    var animationEventNames = \"animationend webkitAnimationEnd MSAnimationEnd oanimationend\"\n    var animatedElsNumber = 0\n    var sexyAnimationEnd = function(e) {\n          if (e.target != e.currentTarget) {\n            // end triggered by an animation on a child\n            return\n          }\n\n          animatedElsNumber--\n          if (animatedElsNumber <= 0 && elsToRemove) {\n            elsToRemove.forEach(function(el) {\n              // browsing quickly can make the el\n              // already removed by last page update ?\n              if (el.parentNode) {\n                el.parentNode.removeChild(el)\n              }\n            })\n\n            elsToAdd.forEach(function(el) {\n              el.className = el.className.replace(el.getAttribute(\"data-pjax-classes\"), \"\")\n              el.removeAttribute(\"data-pjax-classes\")\n              // Pjax.off(el, animationEventNames, sexyAnimationEnd, true)\n            })\n\n            elsToAdd = null // free memory\n            elsToRemove = null // free memory\n\n            // assume the height is now useless (avoid bug since there is overflow hidden on the parent)\n            // oldEl.style.height = \"auto\"\n\n            // this is to trigger some repaint (example: picturefill)\n            this.onSwitch()\n            // Pjax.trigger(window, \"scroll\")\n          }\n        }.bind(this)\n\n    // Force height to be able to trigger css animation\n    // here we get the relevant height\n    // oldEl.parentNode.appendChild(newEl)\n    // relevantHeight = newEl.getBoundingClientRect().height\n    // oldEl.parentNode.removeChild(newEl)\n    // oldEl.style.height = oldEl.getBoundingClientRect().height + \"px\"\n\n    switchOptions = switchOptions || {}\n\n    forEach.call(oldEl.childNodes, function(el) {\n      elsToRemove.push(el)\n      if (el.classList && !el.classList.contains(\"js-Pjax-remove\")) {\n        // for fast switch, clean element that just have been added, & not cleaned yet.\n        if (el.hasAttribute(\"data-pjax-classes\")) {\n          el.className = el.className.replace(el.getAttribute(\"data-pjax-classes\"), \"\")\n          el.removeAttribute(\"data-pjax-classes\")\n        }\n        el.classList.add(\"js-Pjax-remove\")\n        if (switchOptions.callbacks && switchOptions.callbacks.removeElement) {\n          switchOptions.callbacks.removeElement(el)\n        }\n        if (switchOptions.classNames) {\n          el.className += \" \" + switchOptions.classNames.remove + \" \" + (options.backward ? switchOptions.classNames.backward : switchOptions.classNames.forward)\n        }\n        animatedElsNumber++\n        on(el, animationEventNames, sexyAnimationEnd, true)\n      }\n    })\n\n    forEach.call(newEl.childNodes, function(el) {\n      if (el.classList) {\n        var addClasses = \"\"\n        if (switchOptions.classNames) {\n          addClasses = \" js-Pjax-add \" + switchOptions.classNames.add + \" \" + (options.backward ? switchOptions.classNames.forward : switchOptions.classNames.backward)\n        }\n        if (switchOptions.callbacks && switchOptions.callbacks.addElement) {\n          switchOptions.callbacks.addElement(el)\n        }\n        el.className += addClasses\n        el.setAttribute(\"data-pjax-classes\", addClasses)\n        elsToAdd.push(el)\n        fragToAppend.appendChild(el)\n        animatedElsNumber++\n        on(el, animationEventNames, sexyAnimationEnd, true)\n      }\n    })\n\n    // pass all className of the parent\n    oldEl.className = newEl.className\n    oldEl.appendChild(fragToAppend)\n\n    // oldEl.style.height = relevantHeight + \"px\"\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/switches-selectors.js":"var forEachEls = require(\"./foreach-els\")\n\nvar defaultSwitches = require(\"./switches\")\n\nmodule.exports = function(switches, switchesOptions, selectors, fromEl, toEl, options) {\n  selectors.forEach(function(selector) {\n    var newEls = fromEl.querySelectorAll(selector)\n    var oldEls = toEl.querySelectorAll(selector)\n    if (this.log) {\n      this.log(\"Pjax switch\", selector, newEls, oldEls)\n    }\n    if (newEls.length !== oldEls.length) {\n      // forEachEls(newEls, function(el) {\n      //   this.log(\"newEl\", el, el.outerHTML)\n      // }, this)\n      // forEachEls(oldEls, function(el) {\n      //   this.log(\"oldEl\", el, el.outerHTML)\n      // }, this)\n      throw \"DOM doesn’t look the same on new loaded page: ’\" + selector + \"’ - new \" + newEls.length + \", old \" + oldEls.length\n    }\n\n    forEachEls(newEls, function(newEl, i) {\n      var oldEl = oldEls[i]\n      if (this.log) {\n        this.log(\"newEl\", newEl, \"oldEl\", oldEl)\n      }\n      if (switches[selector]) {\n        switches[selector].bind(this)(oldEl, newEl, options, switchesOptions[selector])\n      }\n      else {\n        defaultSwitches.outerHTML.bind(this)(oldEl, newEl, options)\n      }\n    }, this)\n  }, this)\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/events/off.js":"var forEachEls = require(\"../foreach-els\")\n\nmodule.exports = function(els, events, listener, useCapture) {\n  events = (typeof events === \"string\" ? events.split(\" \") : events)\n\n  events.forEach(function(e) {\n    forEachEls(els, function(el) {\n      el.removeEventListener(e, listener, useCapture)\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-pjax/node_modules/pjax/lib/proto/parse-options.js":"/* global _gaq: true, ga: true */\n\nmodule.exports = function(options){\n  this.options = options\n  this.options.elements = this.options.elements || \"a[href], form[action]\"\n  this.options.selectors = this.options.selectors || [\"title\", \".js-Pjax\"]\n  this.options.switches = this.options.switches || {}\n  this.options.switchesOptions = this.options.switchesOptions || {}\n  this.options.history = this.options.history || true\n  this.options.analytics = this.options.analytics || function() {\n    // options.backward or options.foward can be true or undefined\n    // by default, we do track back/foward hit\n    // https://productforums.google.com/forum/#!topic/analytics/WVwMDjLhXYk\n    if (window._gaq) {\n      _gaq.push([\"_trackPageview\"])\n    }\n    if (window.ga) {\n      ga(\"send\", \"pageview\", {page: location.pathname, title: document.title})\n    }\n  }\n  this.options.scrollTo = (typeof this.options.scrollTo === 'undefined') ? 0 : this.options.scrollTo;\n  this.options.cacheBust = (typeof this.options.cacheBust === 'undefined') ? true : this.options.cacheBust\n  this.options.debug = this.options.debug || false\n\n  // we can’t replace body.outerHTML or head.outerHTML\n  // it create a bug where new body or new head are created in the dom\n  // if you set head.outerHTML, a new body tag is appended, so the dom get 2 body\n  // & it break the switchFallback which replace head & body\n  if (!this.options.switches.head) {\n    this.options.switches.head = this.switchElementsAlt\n  }\n  if (!this.options.switches.body) {\n    this.options.switches.body = this.switchElementsAlt\n  }\n  if (typeof options.analytics !== \"function\") {\n    options.analytics = function() {}\n  }\n}"}